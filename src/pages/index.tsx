/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/await-thenable */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unused-vars */
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useState } from "react";
import FeedTemplate from "~/components/templates/feed-template";

import { api } from "~/utils/api";

export default function Home() {
  const hello = api.post.hello.useQuery({ text: "from tRPC" });
  const [tweetsData, setTweetsData] = useState<any>()
  console.log('%cMyProject%cline:16%ctweetsData', 'color:#fff;background:#ee6f57;padding:3px;border-radius:2px', 'color:#fff;background:#1f3c88;padding:3px;border-radius:2px', 'color:#fff;background:rgb(96, 143, 159);padding:3px;border-radius:2px', tweetsData)
  const { data: sessionData } = useSession();
  console.log('%cMyProject%cline:10%csessionData', 'color:#fff;background:#ee6f57;padding:3px;border-radius:2px', 'color:#fff;background:#1f3c88;padding:3px;border-radius:2px', 'color:#fff;background:rgb(251, 178, 23);padding:3px;border-radius:2px', sessionData)
  const tweets = api.tweet.infiniteFeed.useInfiniteQuery(
    {},
    {
      // getNextPageParam: (lastPage) => lastPage?.nextCursor
    }
  )

  const onGetTweets = async () => {
    const res = await tweets
    if (res) {
      setTweetsData(tweets.data?.pages)
    }
  }
  useEffect(() => {
    if (sessionData) {
      void onGetTweets()
    }
  }, [sessionData])

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {sessionData ? (
        <div>
          <FeedTemplate />
        </div>
      ) : (
        <div className="flex justify-center flex-col items-center min-h-screen">
          <div className="border w-[400px] py-10 px-10 flex flex-col items-center rounded-xl gap-6">
            <div className="text-xl font-bold">
              <div>Welcome</div>
            </div>
            <div>
              <button
                onClick={sessionData ? () => void signOut() : () => void signIn()}
              >
                {sessionData ? "Sign out" : "Sign in"}
              </button>
            </div>
          </div>
        </div>
      )}

    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
